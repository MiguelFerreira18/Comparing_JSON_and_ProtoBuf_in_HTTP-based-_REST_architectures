// source: ReviewDTO.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var ProductDTO_pb = require('./ProductDTO_pb.js');
goog.object.extend(proto, ProductDTO_pb);
goog.exportSymbol('proto.LocalDate', null, global);
goog.exportSymbol('proto.ReviewCatalog', null, global);
goog.exportSymbol('proto.ReviewDTO', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReviewDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReviewDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReviewDTO.displayName = 'proto.ReviewDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LocalDate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LocalDate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LocalDate.displayName = 'proto.LocalDate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReviewCatalog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReviewCatalog.repeatedFields_, null);
};
goog.inherits(proto.ReviewCatalog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReviewCatalog.displayName = 'proto.ReviewCatalog';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReviewDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.ReviewDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReviewDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReviewDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
idReview: jspb.Message.getFieldWithDefault(msg, 1, 0),
reviewText: jspb.Message.getFieldWithDefault(msg, 2, ""),
publishingDate: (f = msg.getPublishingDate()) && proto.LocalDate.toObject(includeInstance, f),
approvalStatus: jspb.Message.getFieldWithDefault(msg, 4, ""),
rating: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
vote: jspb.Message.getFieldWithDefault(msg, 6, 0),
product: (f = msg.getProduct()) && ProductDTO_pb.ProductDTO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReviewDTO}
 */
proto.ReviewDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReviewDTO;
  return proto.ReviewDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReviewDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReviewDTO}
 */
proto.ReviewDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdReview(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReviewText(value);
      break;
    case 3:
      var value = new proto.LocalDate;
      reader.readMessage(value,proto.LocalDate.deserializeBinaryFromReader);
      msg.setPublishingDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprovalStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRating(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVote(value);
      break;
    case 7:
      var value = new ProductDTO_pb.ProductDTO;
      reader.readMessage(value,ProductDTO_pb.ProductDTO.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReviewDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReviewDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReviewDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReviewDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdReview();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReviewText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublishingDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LocalDate.serializeBinaryToWriter
    );
  }
  f = message.getApprovalStatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRating();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getVote();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ProductDTO_pb.ProductDTO.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id_review = 1;
 * @return {number}
 */
proto.ReviewDTO.prototype.getIdReview = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.setIdReview = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string review_text = 2;
 * @return {string}
 */
proto.ReviewDTO.prototype.getReviewText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.setReviewText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LocalDate publishing_date = 3;
 * @return {?proto.LocalDate}
 */
proto.ReviewDTO.prototype.getPublishingDate = function() {
  return /** @type{?proto.LocalDate} */ (
    jspb.Message.getWrapperField(this, proto.LocalDate, 3));
};


/**
 * @param {?proto.LocalDate|undefined} value
 * @return {!proto.ReviewDTO} returns this
*/
proto.ReviewDTO.prototype.setPublishingDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.clearPublishingDate = function() {
  return this.setPublishingDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReviewDTO.prototype.hasPublishingDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string approval_status = 4;
 * @return {string}
 */
proto.ReviewDTO.prototype.getApprovalStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.setApprovalStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double rating = 5;
 * @return {number}
 */
proto.ReviewDTO.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.setRating = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 vote = 6;
 * @return {number}
 */
proto.ReviewDTO.prototype.getVote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.setVote = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProductDTO product = 7;
 * @return {?proto.ProductDTO}
 */
proto.ReviewDTO.prototype.getProduct = function() {
  return /** @type{?proto.ProductDTO} */ (
    jspb.Message.getWrapperField(this, ProductDTO_pb.ProductDTO, 7));
};


/**
 * @param {?proto.ProductDTO|undefined} value
 * @return {!proto.ReviewDTO} returns this
*/
proto.ReviewDTO.prototype.setProduct = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReviewDTO} returns this
 */
proto.ReviewDTO.prototype.clearProduct = function() {
  return this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReviewDTO.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LocalDate.prototype.toObject = function(opt_includeInstance) {
  return proto.LocalDate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LocalDate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalDate.toObject = function(includeInstance, msg) {
  var f, obj = {
year: jspb.Message.getFieldWithDefault(msg, 1, 0),
month: jspb.Message.getFieldWithDefault(msg, 2, 0),
day: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LocalDate}
 */
proto.LocalDate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LocalDate;
  return proto.LocalDate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LocalDate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LocalDate}
 */
proto.LocalDate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LocalDate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LocalDate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LocalDate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalDate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.LocalDate.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.LocalDate} returns this
 */
proto.LocalDate.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 month = 2;
 * @return {number}
 */
proto.LocalDate.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.LocalDate} returns this
 */
proto.LocalDate.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.LocalDate.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.LocalDate} returns this
 */
proto.LocalDate.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReviewCatalog.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReviewCatalog.prototype.toObject = function(opt_includeInstance) {
  return proto.ReviewCatalog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReviewCatalog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReviewCatalog.toObject = function(includeInstance, msg) {
  var f, obj = {
reviewsList: jspb.Message.toObjectList(msg.getReviewsList(),
    proto.ReviewDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReviewCatalog}
 */
proto.ReviewCatalog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReviewCatalog;
  return proto.ReviewCatalog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReviewCatalog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReviewCatalog}
 */
proto.ReviewCatalog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReviewDTO;
      reader.readMessage(value,proto.ReviewDTO.deserializeBinaryFromReader);
      msg.addReviews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReviewCatalog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReviewCatalog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReviewCatalog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReviewCatalog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReviewDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReviewDTO reviews = 1;
 * @return {!Array<!proto.ReviewDTO>}
 */
proto.ReviewCatalog.prototype.getReviewsList = function() {
  return /** @type{!Array<!proto.ReviewDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReviewDTO, 1));
};


/**
 * @param {!Array<!proto.ReviewDTO>} value
 * @return {!proto.ReviewCatalog} returns this
*/
proto.ReviewCatalog.prototype.setReviewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReviewDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReviewDTO}
 */
proto.ReviewCatalog.prototype.addReviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReviewDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReviewCatalog} returns this
 */
proto.ReviewCatalog.prototype.clearReviewsList = function() {
  return this.setReviewsList([]);
};


goog.object.extend(exports, proto);
