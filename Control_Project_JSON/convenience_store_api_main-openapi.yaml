openapi: "3.1.0"
info:
  title: "convenience_store_api_main API"
  description: "convenience_store_api_main API"
  version: "1.0.0"
servers:
  - url: "https://convenience_store_api_main"
paths:
  /transaction:
    get:
      summary: "GET transaction"
      operationId: "getAllTransactions"
      parameters:
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      summary: "POST transaction"
      operationId: "registerNewTransaction"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /transaction/product/{id}:
    get:
      summary: "GET transaction/product/{id}"
      operationId: "getTransactionByProductId"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /transaction/{id}:
    get:
      summary: "GET transaction/{id}"
      operationId: "getTransactionById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      summary: "DELETE transaction/{id}"
      operationId: "deleteTransaction"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /products:
    get:
      summary: "GET products"
      operationId: "getAllProducts"
      parameters:
        - name: "orderby"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "id"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
        - name: "sold"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      summary: "POST products"
      operationId: "registerNewProduct"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /products/entity/{id}:
    get:
      summary: "GET products/entity/{id}"
      operationId: "getProductByEntityId"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /products/{id}:
    get:
      summary: "GET products/{id}"
      operationId: "getProductById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      summary: "DELETE products/{id}"
      operationId: "deleteProduct"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /users:
    get:
      summary: "GET users"
      operationId: "getAllUsers"
      parameters:
        - name: "orderby"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "id"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      summary: "POST users"
      operationId: "registerNewUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /users/login:
    post:
      summary: "POST users/login"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponseDTO"
  /users/{id}:
    get:
      summary: "GET users/{id}"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
    put:
      summary: "PUT users/{id}"
      operationId: "editUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
    delete:
      summary: "DELETE users/{id}"
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
  /products/entities:
    get:
      summary: "GET products/entities"
      operationId: "getAllProducts"
      parameters:
        - name: "orderby"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "id"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      summary: "POST products/entities"
      operationId: "registerNewProduct"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEntityDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /products/entities/{id}:
    get:
      summary: "GET products/entities/{id}"
      operationId: "getProductById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      summary: "PUT products/entities/{id}"
      operationId: "updateProduct"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEntityDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      summary: "DELETE products/entities/{id}"
      operationId: "deleteProduct"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    TransactionDTO:
      type: "object"
      properties:
        cpf:
          type: "string"
        productId:
          type: "integer"
          format: "int32"
    ProductDTO:
      type: "object"
      properties:
        entityId:
          type: "integer"
          format: "int32"
    UserDTO:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        role:
          type: "string"
          enum:
            - "ADMIN"
            - "EMPLOYEE"
    UserAuthDTO:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    Instant:
      type: "object"
      properties: { }
    UserResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        email:
          type: "string"
        role:
          type: "string"
          enum:
            - "ADMIN"
            - "EMPLOYEE"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    LoginResponseDTO:
      type: "object"
      properties:
        token:
          type: "string"
        expiresAt:
          $ref: "#/components/schemas/Instant"
        user:
          $ref: "#/components/schemas/UserResponseDTO"
    EditUserDTO:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
    ProductEntityDTO:
      type: "object"
      properties:
        name:
          type: "string"